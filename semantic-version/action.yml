name: 'Semantic Version'
description: Updates version using git tags
inputs:
  prefix:
    description: 'use prefix in tags'
    required: true
    default: 'v'
  mode:
    description: 'type of version file: python, javascript, maven or text'
    required: true
  path:
    description: 'target file to update'
    required: true
  inc_build:
    description: 'should we increase the version build number'
    required: false
    default: '1'    
outputs:
  version:
    description: 'newely computed version'
    value: ${{steps.export-version.outputs.version}}
  short_version:
    description: 'newely computed short version (major.minor)'
    value: ${{steps.export-version.outputs.short_version}}
runs:
  using: 'composite'
  steps:
    - shell: bash
      run: |
        if [ "${{ inputs.path }}" == "" ]; then
          echo input parameter ''path'' is mandatory
          exit 1;
        fi

        if [ ! -f "${{ inputs.path }}" ]; then
          echo file ${{ inputs.path }} not found
          exit 1;
        fi

    - id: base-version
      shell: bash
      run: |
        if [ "${{ inputs.mode }}" == "python" ]; then
          VERSION=$(cat ${{ inputs.path }} | tr -d " \"'" | cut -f2 -d=)
        elif [ "${{ inputs.mode }}" == "text" ]; then
          VERSION=$(cut -f2 -d= ${{ inputs.path }})
        elif [ "${{ inputs.mode }}" == "javascript" ]; then
          VERSION=$(jq -r .version ${{ inputs.path }})
        else
          echo input parameter '''mode''' should be one of python, javascript, maven or text
          exit 1
        fi
        echo ::set-output name=major::$(echo ${VERSION} | cut -d. -f1)
        echo ::set-output name=minor::$(echo ${VERSION} | cut -d. -f2)
        echo ::set-output name=build::$(echo ${VERSION} | cut -d. -f3)

    - id: new-version
      shell: bash
      run: |
        git pull --tags
        PREFIX=${{ inputs.prefix }}${{ steps.base-version.outputs.major }}.${{ steps.base-version.outputs.minor }}
        BUILD=$(git tag -l "${PREFIX}.*" | cut -d. -f3 | sort -n | tail -1)
        if [ "${{ inputs.inc_build }}" == "1" ]; then
          echo ::set-output name=build::$(( ${BUILD:-0} + 1))
        else
          echo ::set-output name=build::$(( ${BUILD:-0} ))
        fi

    - id: export-version
      shell: 'bash'
      run: |
        OLD_VERSION=${{ steps.base-version.outputs.major }}.${{ steps.base-version.outputs.minor }}.${{ steps.base-version.outputs.build }}
        NEW_VERSION=${{ steps.base-version.outputs.major }}.${{ steps.base-version.outputs.minor }}.${{ steps.new-version.outputs.build }}
        NEW_SHORT_VERSION=${{ steps.base-version.outputs.major }}.${{ steps.base-version.outputs.minor }}
        if [ "${{ inputs.mode }}" == "python" ]; then
          sed -i -e "s/${OLD_VERSION}/${NEW_VERSION}/" ${{ inputs.path }}
        elif [ "${{ inputs.mode }}" == "text" ]; then
          echo ${NEW_VERSION} > ${{ inputs.path }}
        elif [ "${{ inputs.mode }}" == "javascript" ]; then
          tmpfile=$(mktemp /tmp/version.XXXXXX)
          jq --arg ver ${NEW_VERSION} '.version = $ver' ${{ inputs.path }} > $tmpfile
          cp $tmpfile ${{ inputs.path }}
        fi
        echo ::set-output name=version::${NEW_VERSION}
        echo ::set-output name=short_version::${NEW_SHORT_VERSION}
        if [ "${{ inputs.inc_build }}" == "1" ]; then
          git config user.email "build@pangeabiomed.com"
          git config user.name "Builder"
          git tag -a "${{ inputs.prefix }}${NEW_VERSION}" -m "${{ inputs.prefix }}${NEW_VERSION}"
          git push --tags
        fi
